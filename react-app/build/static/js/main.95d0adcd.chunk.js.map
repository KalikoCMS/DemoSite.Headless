{"version":3,"sources":["features/home/HomePage.js","app/layout/AppConstants.js","app/layout/App.js","serviceWorker.js","index.js"],"names":["HomePage","state","startPage","children","_this2","this","setTimeout","loadStartPage","_this3","axios","get","concat","then","res","data","setState","loadChildren","pageId","_this4","react_default","a","createElement","className","_startPage$properties","properties","heading","mainbody","topimage","src","imageUrl","alt","description","value","dangerouslySetInnerHTML","__html","map","p","_p$properties","renderContent","renderChildren","Component","App","home_HomePage","Boolean","window","location","hostname","match","ReactDOM","render","app_layout_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAwFeA,6MAnFXC,MAAQ,CACJC,UAAW,KACXC,SAAU,yFAGM,IAAAC,EAAAC,KAChBC,WAAW,kBAAMF,EAAKG,iBAAiB,6CAG3B,IAAAC,EAAAH,KACZI,IAAMC,IAAN,GAAAC,OCbqB,0CDarB,mBAA4CC,KAAK,SAAAC,GAC7C,IAAMX,EAAYW,EAAIC,KACtBN,EAAKO,SAAS,CAAEb,cAEhBM,EAAKQ,aAAad,EAAUe,+CAIvBA,GAAQ,IAAAC,EAAAb,KACjBI,IAAMC,IAAN,GAAAC,OCtBqB,0CDsBrB,SAAAA,OAAkCM,EAAlC,cAAqDL,KAAK,SAAAC,GACtD,IAAMV,EAAWU,EAAIC,KACrBI,EAAKH,SAAS,CAAEZ,uDAIR,IACJD,EAAcG,KAAKJ,MAAnBC,UAER,GAAiB,MAAbA,EACA,OAAOiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,kCAJC,IAAAC,EAQ4BrB,EAAUsB,WAA1CC,EARIF,EAQJE,QAASC,EARLH,EAQKG,SAAUC,EARfJ,EAQeI,SAE3B,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVK,GAAYR,EAAAC,EAAAC,cAAA,OAAKO,IC1CL,yBD0C0BD,EAASE,SAAUC,IAAKH,EAASI,cACxEZ,EAAAC,EAAAC,cAAA,UAAKI,GAAWA,EAAQO,OACvBN,GAAYP,EAAAC,EAAAC,cAAA,OAAKY,wBAAyB,CAAEC,OAAQR,EAASM,mDAKzD,IACL7B,EAAaE,KAAKJ,MAAlBE,SAER,OAAgB,MAAZA,EACOgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,kCAIPH,EAAAC,EAAAC,cAAA,WACKlB,EAASgC,IAAI,SAAAC,GAAK,IAAAC,EACeD,EAAEZ,WAAxBC,EADOY,EACPZ,QAASC,EADFW,EACEX,SAEjB,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAKI,GAAWA,EAAQO,OACvBN,GAAYP,EAAAC,EAAAC,cAAA,OAAKY,wBAAyB,CAAEC,OAAQR,EAASM,8CASlF,OACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,0CACkCF,EAAAC,EAAAC,cAAA,4BADlC,2BACqFF,EAAAC,EAAAC,cAAA,gGAGrFF,EAAAC,EAAAC,cAAA,WAAMhB,KAAKiC,iBACXnB,EAAAC,EAAAC,cAAA,uCACChB,KAAKkC,yBA9ECC,aEURC,mLARP,OACItB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAACqB,EAAD,cAJEF,aCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.95d0adcd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { API_BASE_PATH, CMS_BASE_PATH } from '../../app/layout/AppConstants';\r\n\r\nclass HomePage extends Component {\r\n    state = {\r\n        startPage: null,\r\n        children: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => this.loadStartPage(), 1000);\r\n    }\r\n\r\n    loadStartPage() {\r\n        axios.get(`${API_BASE_PATH}page/startpage`).then(res => {\r\n            const startPage = res.data;\r\n            this.setState({ startPage });\r\n\r\n            this.loadChildren(startPage.pageId);\r\n        });\r\n    }\r\n\r\n    loadChildren(pageId) {\r\n        axios.get(`${API_BASE_PATH}page/${pageId}/children`).then(res => {\r\n            const children = res.data;\r\n            this.setState({ children });\r\n        });\r\n    }\r\n\r\n    renderContent() {\r\n        const { startPage } = this.state;\r\n\r\n        if (startPage == null) {\r\n            return <div className=\"loading\">Loading content from server...</div>;\r\n        }\r\n\r\n        // Get page properties from the properties-collection, notice that property names always are lowercased\r\n        const { heading, mainbody, topimage } = startPage.properties;\r\n\r\n        return (\r\n            <div className=\"cms\">\r\n                {topimage && <img src={CMS_BASE_PATH + topimage.imageUrl} alt={topimage.description} />}\r\n                <h2>{heading && heading.value}</h2>\r\n                {mainbody && <div dangerouslySetInnerHTML={{ __html: mainbody.value }} />}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderChildren() {\r\n        const { children } = this.state;\r\n\r\n        if (children == null) {\r\n            return <div className=\"loading\">Loading content from server...</div>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {children.map(p => {\r\n                    const { heading, mainbody } = p.properties;\r\n\r\n                    return (\r\n                        <div className=\"cms\">\r\n                            <h2>{heading && heading.value}</h2>\r\n                            {mainbody && <div dangerouslySetInnerHTML={{ __html: mainbody.value }} />}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Headless demo using React</h1>\r\n                <p>\r\n                    Content below is fetched from <strong>Kaliko CMS</strong> using the content API. <i>(A one second delay has been added to the loader so that the\r\n                    loading can be seen.)</i>\r\n                </p>\r\n                <div>{this.renderContent()}</div>\r\n                <h2>Posts loaded from the CMS</h2>\r\n                {this.renderChildren()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n","export const CMS_BASE_PATH = 'http://localhost:59558';\r\n\r\nexport const API_BASE_PATH = 'http://localhost:59558/contentapi/v1.0/';","import React, { Component } from 'react';\nimport './App.css';\nimport HomePage from '../../features/home/HomePage';\n\nclass App extends Component {\n    render() {\n        return (\n            <main className=\"main\">\n                <HomePage />\n            </main>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}